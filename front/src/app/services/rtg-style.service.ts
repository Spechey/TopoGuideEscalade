import { Injectable } from '@angular/core';
import * as L from 'leaflet';
import * as GPX from 'leaflet-gpx';
import {Circle, Marker, Polygon} from 'leaflet';
import {RtgApiService} from './rtg-api.service';

@Injectable({
  providedIn: 'root'
})
export class RtgStyleService {


  iconSVGSiContent = '<svg xmlns="http://www.w3.org/2000/svg" width="70" height="70">' +
    '<g transform="scale(.2) translate(200 100)">' +
    '<path d="{{PATH}}"  stroke-width="6" stroke-linejoin="null" stroke-linecap="null"  fill="{{FILLCOLOR}}" stroke="{{STOKECOLOR}}" />' +
    '</g></svg>';

  iconSVGSiMultiContent = '<svg xmlns="http://www.w3.org/2000/svg" width="70" height="70">' +
    '<g transform="scale(.2) translate(200 20)">' +
    '<path d="M 0,0 m0,0.0c-12,-13.06003 -5.661,-7.64633 -26.907,-12.64633l-137.5034,0l0,0l50.382,0l94.46439,0c6.123,0 11.99701,2.4913 16.32901,6.9243c4.32999,4.43602 6.763,10.44902 6.763,16.72202l0,59.114l0,0l0,35.4686l0,0c0,13.057 1.66199,21.645 -23.09201,23.645l-23.23199,0l-23.23201,0l-25.81899,32.12601l-19.2817,-33.063l-36.2817,-0.063l37.37575,0l17.37576,33l24.7515,-32c-12.7541,0 43.90739,-0.588 58.90739,-0.64499l13,-9l0,-52.46861l-1,-17l0.125,-4.88931l0.125,-4.88919l0.125,-4.88921l0.06201,-2.4447l0.06299,-2.4446z m-20,65.05545c-2.74695,-4.18672 -6.12448,-7.58061 -9.4743,-9.95508c-3.95551,2.43814 -8.7348,3.91502 -13.97955,3.91502l-13.31708,-3.07671c-4.01248,-0.69937 -21.63602,-19.10165 -24.38278,-14.91496c-6.39882,9.72943 12.10242,29.4881 17.62196,32.07664c2.47147,1.16422 0.21088,3.3902 1.90857,7.91931c1.69774,4.5291 0.79297,3.45247 -3.50301,7.96294c-4.29596,4.51044 -14.27826,5.61351 -9.39322,13.83423c4.88503,8.2207 28.5451,-2.54167 29.45158,-7.56828c0.90585,5.02661 4.41484,17.4688 8.20464,17.4688c6.31647,0 11.45267,-9.01131 11.45267,-20.14206c0,-2.5016 -0.2753,-4.89937 -0.7692,-7.10565c2.69153,2.17743 5.30038,3.0463 7.77274,1.88208c5.51968,-2.58855 4.80566,-12.56688 -1.59302,-22.29628zm-23.45386,-9.83321c10.62857,0 19.25122,-7.2739 19.25122,-16.23871s-8.62265,-16.24432 -19.25122,-16.24432c-10.62859,0 -19.252,7.27385 -19.252,16.24432s8.62341,16.23871 19.252,16.23871z m-150,-45.00l0,0c0,-13.06001 10.3382,-23.6463 23.09219,-23.6463l10.49699,0l0,0c16.79402,0 81.58801,1 98.38202,1c-4.461,47.29129 -76.922,93.58229 -81.38202,140.8743l-27.49699,0c-12.754,0 -23.09219,-10.588 -23.09219,-23.645l0,0l0,-35.46898l0,0l0,-59.11401l0,-0.00001z"' +
    '  stroke-width="6" stroke-linejoin="null" stroke-linecap="null"  fill="{{FILLCOLOR}}" stroke="{{STOKECOLOR}}" />' +
    '</g>' +
    '<g transform="translate(5 25)">' +
    '<text font-size="30" font-family="arial">{{NB}}</text>' +
    '</g>' +
    '</svg>';

  iconsMapsSiPaths = {
    'si-Defaut':  'M 0,0 m0,0.0c-12,-13.06003 -5.661,-7.64633 -26.907,-12.64633l-137.5034,0l0,0l50.382,0l94.46439,0c6.123,0 11.99701,2.4913 16.32901,6.9243c4.32999,4.43602 6.763,10.44902 6.763,16.72202l0,59.114l0,0l0,35.4686l0,0c0,13.057 1.66199,21.645 -23.09201,23.645l-23.23199,0l-23.23201,0l-25.81899,32.12601l-19.2817,-33.063l-36.2817,-0.063l37.37575,0l17.37576,33l24.7515,-32c-12.7541,0 43.90739,-0.588 58.90739,-0.64499l13,-9l0,-52.46861l-1,-17l0.125,-4.88931l0.125,-4.88919l0.125,-4.88921l0.06201,-2.4447l0.06299,-2.4446z m-20,65.05545c-2.74695,-4.18672 -6.12448,-7.58061 -9.4743,-9.95508c-3.95551,2.43814 -8.7348,3.91502 -13.97955,3.91502l-13.31708,-3.07671c-4.01248,-0.69937 -21.63602,-19.10165 -24.38278,-14.91496c-6.39882,9.72943 12.10242,29.4881 17.62196,32.07664c2.47147,1.16422 0.21088,3.3902 1.90857,7.91931c1.69774,4.5291 0.79297,3.45247 -3.50301,7.96294c-4.29596,4.51044 -14.27826,5.61351 -9.39322,13.83423c4.88503,8.2207 28.5451,-2.54167 29.45158,-7.56828c0.90585,5.02661 4.41484,17.4688 8.20464,17.4688c6.31647,0 11.45267,-9.01131 11.45267,-20.14206c0,-2.5016 -0.2753,-4.89937 -0.7692,-7.10565c2.69153,2.17743 5.30038,3.0463 7.77274,1.88208c5.51968,-2.58855 4.80566,-12.56688 -1.59302,-22.29628zm-23.45386,-9.83321c10.62857,0 19.25122,-7.2739 19.25122,-16.23871s-8.62265,-16.24432 -19.25122,-16.24432c-10.62859,0 -19.252,7.27385 -19.252,16.24432s8.62341,16.23871 19.252,16.23871z m-150,-45.00l0,0c0,-13.06001 10.3382,-23.6463 23.09219,-23.6463l10.49699,0l0,0c16.79402,0 81.58801,1 98.38202,1c-4.461,47.29129 -76.922,93.58229 -81.38202,140.8743l-27.49699,0c-12.754,0 -23.09219,-10.588 -23.09219,-23.645l0,0l0,-35.46898l0,0l0,-59.11401l0,-0.00001z',
    'si-Multi':   'M 65,-170 m0,0c-12,-13.06 -5.661,-7.64633 -26.907,-12.6463l-137.503,0l0,0l50.382,0l94.464,0c6.123,0 11.997,2.4913 16.329,6.92427c4.32999,4.43602 6.763,10.44902 6.763,16.72203l0,59.114l0,0l0,35.469l0,0c0,13.057 1.66199,21.645 -23.092,23.645l-23.232,0l-23.232,0l-25.819,32.12601l-19.282,-33.063l-36.28101,-0.063l37.375,0l17.37611,33l24.7515,-32c-12.7541,0 43.9074,-0.588 58.9074,-0.645l13,-8.99999l0,-52.469l-1,-17l0.125,-4.8893l0.125,-4.8892l0.125,-4.8892l0.06201,-2.4447l0.06299,-2.4446l-3.5,-30.557z m-199,11l0,0c0,-13.06001 10.3382,-23.6463 23.09219,-23.6463l10.49698,0l0,0c16.79404,0 81.58801,1 98.38203,1c65.539,5.29129 124.078,113.58229 -29.38203,139.8743l-79.49698,1c-12.754,0 -23.09219,-10.588 -23.09219,-23.645l0,0l0,-35.46898l0,0l0,-59.11401l0,-0.00001z',
    'si-Falaise': 'M 0,0 m0,0.0c-12,-13.06003 -5.661,-7.64633 -26.907,-12.64633l-137.5034,0l0,0l50.382,0l94.46439,0c6.123,0 11.99701,2.4913 16.32901,6.9243c4.32999,4.43602 6.763,10.44902 6.763,16.72202l0,59.114l0,0l0,35.4686l0,0c0,13.057 1.66199,21.645 -23.09201,23.645l-23.23199,0l-23.23201,0l-25.81899,32.12601l-19.2817,-33.063l-36.2817,-0.063l37.37575,0l17.37576,33l24.7515,-32c-12.7541,0 43.90739,-0.588 58.90739,-0.64499l13,-9l0,-52.46861l-1,-17l0.125,-4.88931l0.125,-4.88919l0.125,-4.88921l0.06201,-2.4447l0.06299,-2.4446z m-20,65.05545c-2.74695,-4.18672 -6.12448,-7.58061 -9.4743,-9.95508c-3.95551,2.43814 -8.7348,3.91502 -13.97955,3.91502l-13.31708,-3.07671c-4.01248,-0.69937 -21.63602,-19.10165 -24.38278,-14.91496c-6.39882,9.72943 12.10242,29.4881 17.62196,32.07664c2.47147,1.16422 0.21088,3.3902 1.90857,7.91931c1.69774,4.5291 0.79297,3.45247 -3.50301,7.96294c-4.29596,4.51044 -14.27826,5.61351 -9.39322,13.83423c4.88503,8.2207 28.5451,-2.54167 29.45158,-7.56828c0.90585,5.02661 4.41484,17.4688 8.20464,17.4688c6.31647,0 11.45267,-9.01131 11.45267,-20.14206c0,-2.5016 -0.2753,-4.89937 -0.7692,-7.10565c2.69153,2.17743 5.30038,3.0463 7.77274,1.88208c5.51968,-2.58855 4.80566,-12.56688 -1.59302,-22.29628zm-23.45386,-9.83321c10.62857,0 19.25122,-7.2739 19.25122,-16.23871s-8.62265,-16.24432 -19.25122,-16.24432c-10.62859,0 -19.252,7.27385 -19.252,16.24432s8.62341,16.23871 19.252,16.23871z m-150,-45.00l0,0c0,-13.06001 10.3382,-23.6463 23.09219,-23.6463l10.49699,0l0,0c16.79402,0 81.58801,1 98.38202,1c-4.461,47.29129 -76.922,93.58229 -81.38202,140.8743l-27.49699,0c-12.754,0 -23.09219,-10.588 -23.09219,-23.645l0,0l0,-35.46898l0,0l0,-59.11401l0,-0.00001z',
    'si-Bloc':    'M 0,0 m0,0m0,0c-12,-13.06 -5.661,-7.64633 -26.907,-12.6463l-137.503,0l0,0l50.382,0l94.464,0c6.123,0 11.997,2.4913 16.329,6.92427c4.32999,4.43602 6.763,10.44902 6.763,16.72203l0,59.114l0,0l0,35.469l0,0c0,13.057 1.66199,21.645 -23.092,23.645l-23.232,0l-23.232,0l-25.819,32.12601l-19.282,-33.063l-36.28101,-0.063l37.375,0l17.37611,33l24.7515,-32c-12.7541,0 43.9074,-0.588 58.9074,-0.645l13,-8.99999l0,-52.469l-1,-17l0.125,-4.8893l0.125,-4.8892l0.125,-4.8892l0.06201,-2.4447l0.06299,-2.4446l-3.5,-30.557zm-20,65.0555c-2.747,-4.1868 -6.1245,-7.5807 -9.4743,-9.9551c-3.9555,2.4381 -8.7348,3.915 -13.9795,3.915l-13.3171,-3.0767c-4.0125,-0.6994 -21.6361,-19.1017 -24.3828,-14.915c-6.3988,9.7295 12.1024,29.4881 17.622,32.0767c2.4714,1.1642 0.2108,3.3902 1.9085,7.9193c1.6978,4.5291 0.793,3.4524 -3.503,7.9629c-4.2959,4.5104 -14.27821,5.6135 -9.3932,13.8344c4.885,8.221 28.5451,-2.542 29.4516,-7.56841c0.9058,5.02641 4.4148,17.46841 8.2046,17.46841c6.3165,0 11.4527,-9.011 11.4527,-20.1417c0,-2.5016 -0.2753,-4.8994 -0.7692,-7.1056c2.6915,2.1774 5.3004,3.0463 7.7727,1.882c5.5197,-2.5885 4.8057,-12.5668 -1.593,-22.2962zm-23.4539,-9.8333c10.6286,0 19.2513,-7.2739 19.2513,-16.2387s-8.6227,-16.2443 -19.2513,-16.2443c-10.6286,0 -19.252,7.2739 -19.252,16.2443s8.6234,16.2387 19.252,16.2387zm-150.0001,-45l0,0c0,-13.05997 10.338,-23.6463 23.092,-23.6463l10.49699,0l0,0c-26.20599,112 50.843,-19.2913 73.382,21c22.539,40.2913 -38.922,37.5823 -26.382,120.8741l-57.497,0c-12.754,0 -23.092,-10.588 -23.092,-23.645l0,0l0,-35.4687l0,0l0,-59.1141l0,0z',
    'si-SAE':     'M 0,0 m0,-0.28125m17.4023,-9.28125c-0.6093,-1.2475 -72.0008,-41.6073 -110.1218,-62.8494l-107.12851,57.9023l-3.16399,1.8985l109.66759,-61.7383l80.8468,46.3398c14.34957,8.8594 30.915,17.2101 31.7274,18.94773c0.8125,1.73765 -17.49477,0.21855 -18.76039,2.69468l3.05859,76.19989l0,0l0,35.4693l0,0c0,13.057 1.66199,21.645 -23.092,23.645l-23.232,0l-23.232,0l-25.819,32.12599l-19.282,-33.063l-58.21901,-0.063l59.313,0l17.37611,33.00001l24.7515,-32c-12.7541,0 43.9074,-0.58801 58.9074,-0.645l13,-9l0,-52.4693l-1,-17l0.125,-4.8892l-0.50781,-4.8893l-0.19141,-5.2056l0.06201,-1.8118l-2.46826,-40.41339c5.9349,-0.16614 17.99217,-0.93841 17.38277,-2.18591zm-37.4023,74.3367c-2.747,-4.1868 -6.1245,-7.5806 -9.4743,-9.9551c-3.9555,2.4382 -8.7348,3.915 -13.9795,3.915l-13.3171,-3.0766c-4.0125,-0.6995 -21.6361,-19.1017 -24.3828,-14.915c-6.3988,9.7295 12.1024,29.4881 17.622,32.0767c2.4714,1.1642 0.2108,3.3902 1.9085,7.9192c1.6978,4.5291 0.793,3.4524 -3.503,7.9629c-4.2959,4.5104 -14.27821,5.61349 -9.3932,13.8347c4.885,8.221 28.5451,-2.54221 29.4516,-7.5687c0.9058,5.0265 4.4148,17.4687 8.2046,17.4687c6.3165,0 11.4527,-9.01099 11.4527,-20.1419c0,-2.5017 -0.2753,-4.8994 -0.7692,-7.1056c2.6915,2.1774 5.3004,3.0462 7.7727,1.8819c5.5197,-2.58849 4.8057,-12.5668 -1.593,-22.2962zm-23.4539,-9.8333c10.6286,0 19.2513,-7.2739 19.2513,-16.2386s-8.6227,-16.2443 -19.2513,-16.2443c-10.6286,0 -19.252,7.2738 -19.252,16.2443s8.6234,16.2386 19.252,16.2386zm-150.0001,-44.99995l0,0c0,-13.05997 10.338,-23.64625 23.092,-23.64625l-30.952,0.3164l103.46459,-57.375c43.7042,18.5781 92.92115,44.2282 112.2531,58.1367c19.332,13.90847 -59.5743,-16.6052 -183.7997,-0.5322l-0.966,140.7654c-12.754,0 -23.092,-10.025 -23.092,-23.082l0,0l0,-35.4689l0,0l0,-59.11415l0,0z',
  };

  constructor() { }

  piMaps = {
    pdv: 'point-de-vue',
    p: 'parking',
    acces: 'acces-site',
    slackline: 'slackline',
    climbingcrew: 'cc',
    ffme: 'ffme',
    partenaire: 'partenaire',
    caf: 'caf',
  };

  colorMaps = {
    1: 'rgb(0, 221, 00)',
    2: 'rgb(0, 221, 00)',
    3: 'rgb(0, 221, 00)',
    4: 'rgb(0, 187, 00)',
    5: 'rgb(22, 142, 247)',
    6: 'rgb(248, 128, 23)',
    7: 'rgb(255, 0, 0)',
    8: 'rgb(34, 34, 34)',
    9: 'rgb(000000, 000000, 000000)',
    n: 'rgb(255, 255, 0)',
    default: 'rgb(173, 173, 173)',
    '-': 'rgb(173, 173, 173)',
  };

  public getSiSvgIcon(si: any): string {
    const iconUrl = encodeURI('data:image/svg+xml,'
      + this.iconSVGSiContent
        .replace('{{PATH}}', this.iconsMapsSiPaths[si.type])
        .replace('{{FILLCOLOR}}', this.colorMaps[si.cot])
        .replace('{{STOKECOLOR}}', 'black')
        .replace('#','%23' )
    );
    return iconUrl;
  }

  public getSiMarker(si: any): Marker {
      if (!this.iconsMapsSiPaths[si.type]) {
        si.type = 'si-Defaut';
      }
      return L.marker(si.coords, {
        icon: L.icon({
          iconUrl: this.getSiSvgIcon(si),
          iconAnchor: [20, 50],
          popupAnchor: [-3, -76]
        }),
      });
  }

  public getMultiSiMarker(mSi: any): Marker {
    const iconUrl = encodeURI('data:image/svg+xml,'
      + this.iconSVGSiMultiContent
        .replace('{{FILLCOLOR}}', this.colorMaps.default)
        .replace('{{NB}}', mSi.nb.toString())
        .replace('{{STOKECOLOR}}', 'black')
        .replace('#','%23')
    );
    return L.marker(mSi.coords, {
      icon: L.icon({
        iconUrl: iconUrl,
        iconAnchor:   [22, 94],
        shadowAnchor: [4, 62],
        popupAnchor:  [-3, -76]
      }),
    });
  }

  public getScMarker(sc: any): any {
    if (sc.polygon.length === 1) {
      return L.circle(sc.polygon[0], {
        color: this.colorMaps[Math.round(sc.cot)],
        weight: 20,
        opacity: .5,
      });
    }
    return new L.Polyline(sc.polygon, {smoothFactor: 10,
                                          color: this.colorMaps[Math.round(sc.cot)],
                                          weight: 20,
                                          opacity: .5,
                                          lineCap: 'round',
                                          lineJoin: 'round',
                                          });
  }

  public getSpMarker(sp: any): Circle {
    return L.circle(sp.coords, 2,{ color: this.colorMaps[sp.cotMax], fillColor: this.colorMaps[sp.cotMin] });
  }

  public getGpxMarker(gpx: any): any {
    return new GPX.GPX(RtgApiService.apiUrl + '/rpc/rtg_getgpxpath.php?id=' + gpx.id, {async: true,
                                                                                      marker_options: {
                                                                                        startIconUrl: null,
                                                                                        endIconUrl: null,
                                                                                        shadowUrl: null,
                                                                                      },
                                                                                      polyline_options: {
                                                                                        color: 'darkblue',
                                                                                        opacity: 1,
                                                                                        weight: 3,
                                                                                        lineCap: 'round',
                                                                                        lineJoin: 'round',
                                                                                        smoothFactor: 5
                                                                                      }});
  }


  public getPiMarker(pi: any): Marker {
    return L.marker(pi.coords, {
      icon: L.icon({
        iconUrl: '/assets/' + this.piMaps[pi.piType.toLowerCase()] + '.png',
      }),
    });
  }
}
